import threading
import math
import numpy as np
import matplotlib.pyplot as plt
# import matplotlib.animation as anim
from time import sleep
# from rich import print
from rich.console import Console
from rich.traceback import install
from src.Client import Client
from src.Odometry import Odometry
from src.Mapper import Mapper

console = Console()
install() # install rich traceback

class SendMockdata (threading.Thread):
   def __init__(self, threadID):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.POINT = ['[0, 201, 202, 202, 203, 203, 204, 204, 205, 206, 207, 208, 209, 209, 210, 212, 213, 214, 216, 217, 219, 220, 222, 223, 226, 228, 230, 232, 236, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 296, 289, 278, 272, 265, 261, 258, 254, 251, 249, 249, 244, 242, 242, 237, 236, 234, 232, 230, 228, 227, 226, 224, 223, 222, 220, 220, 219, 218, 217, 216, 216, 215, 215, 215, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 215, 215, 216, 216, 217, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 233, 234, 236, 237, 239, 241, 244, 247, 249, 249, 253, 257, 260, 262, 265, 268, 272, 275, 278, 282, 286, 289, 293, 300, 304, 309, 314, 319, 325, 333, 339, 346, 349, 359, 371, 379, 387, 387, 405, 415, 425, 436, 448, 460, 473, 494, 510, 526, 545, 564, 584, 616, 616, 669, 698, 730, 783, 824, 868, 919, 0, 1366, 1364, 1358, 1353, 1351, 1352, 1351, 1351, 1350, 1349, 1350, 1351, 1351, 1352, 1353, 1358, 1358, 1364, 1367, 1372, 1290, 1263, 1263, 1050, 971, 891, 827, 771, 719, 655, 619, 586, 558, 534, 512, 480, 462, 446, 431, 416, 398, 386, 375, 365, 365, 346, 338, 330, 330, 315, 309, 302, 294, 288, 283, 278, 273, 269, 263, 259, 255, 252, 249, 244, 242, 239, 236, 234, 231, 229, 227, 227, 227, 221, 219, 217, 216, 214, 213, 212, 210, 209, 208, 207, 206, 206, 204, 204, 203, 203, 202, 202, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201]', 
                '[0, 217, 217, 218, 219, 219, 220, 221, 222, 223, 224, 225, 226, 227, 227, 229, 231, 232, 235, 236, 238, 240, 242, 243, 243, 248, 251, 253, 257, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286, 284, 277, 267, 260, 255, 252, 249, 245, 242, 239, 237, 235, 233, 231, 229, 227, 226, 224, 221, 220, 219, 217, 216, 215, 214, 213, 212, 211, 211, 209, 209, 208, 208, 208, 207, 207, 207, 207, 206, 206, 207, 207, 207, 207, 207, 207, 208, 209, 209, 209, 210, 211, 212, 213, 214, 215, 216, 216, 218, 219, 220, 222, 223, 225, 227, 228, 230, 232, 234, 237, 239, 241, 243, 246, 250, 252, 255, 258, 261, 264, 267, 271, 274, 278, 282, 286, 292, 297, 302, 306, 312, 317, 325, 331, 338, 344, 351, 363, 370, 379, 388, 398, 407, 418, 429, 441, 453, 467, 489, 503, 521, 540, 559, 580, 0, 1008, 1004, 1000, 998, 991, 987, 985, 982, 978, 979, 978, 975, 974, 974, 972, 971, 973, 973, 972, 974, 976, 978, 979, 982, 983, 984, 989, 991, 996, 999, 1003, 1128, 929, 870, 816, 769, 725, 688, 638, 611, 582, 558, 534, 513, 484, 468, 452, 439, 423, 405, 394, 383, 373, 373, 355, 347, 339, 332, 325, 318, 312, 303, 298, 293, 288, 283, 279, 273, 270, 267, 263, 260, 256, 253, 250, 248, 246, 243, 241, 239, 238, 236, 234, 232, 230, 229, 227, 226, 225, 223, 222, 221, 220, 220, 219, 218, 218, 217, 217, 216, 216, 216, 216, 215, 215, 215, 215, 216, 216, 216, 216]', 
                '[90, 226, 227, 227, 228, 229, 229, 229, 231, 232, 233, 234, 235, 237, 238, 240, 241, 242, 244, 246, 248, 250, 251, 253, 257, 259, 260, 264, 269, 274, 279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 380, 384, 389, 394, 398, 408, 416, 427, 437, 448, 461, 473, 486, 501, 516, 533, 561, 581, 602, 626, 655, 681, 681, 681, 787, 827, 874, 954, 1008, 1009, 1013, 1000, 996, 994, 991, 989, 984, 983, 982, 979, 979, 978, 978, 978, 978, 978, 979, 981, 982, 982, 983, 920, 892, 799, 726, 668, 619, 576, 541, 511, 486, 452, 432, 415, 399, 384, 370, 356, 345, 334, 325, 315, 303, 295, 295, 281, 275, 269, 263, 258, 253, 248, 244, 239, 233, 232, 228, 225, 222, 219, 216, 213, 211, 208, 206, 203, 201, 199, 197, 196, 194, 193, 193, 190, 189, 187, 186, 185, 184, 183, 182, 181, 181, 180, 179, 179, 178, 178, 177, 177, 177, 177, 177, 177, 176, 177, 177, 177, 177, 177, 178, 178, 178, 179, 179, 180, 181, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 201, 202, 204, 206, 208, 210, 213, 215, 217, 221, 223, 226, 229, 232, 235, 238, 242, 245, 249, 252, 257, 263, 267, 272, 277, 0, 269, 0, 0, 279, 275, 272, 267, 265, 262, 262, 256, 254, 252, 250, 248, 246, 244, 242, 240, 238, 237, 236, 235, 233, 232, 231, 230, 229, 228, 228, 227, 227, 226, 226, 225, 225, 225, 225, 225, 225, 225, 225, 225, 226, 226]', 
                '[0, 204, 204, 205, 205, 206, 206, 207, 209, 209, 211, 211, 211, 214, 215, 216, 218, 219, 222, 223, 225, 227, 229, 231, 233, 235, 237, 240, 244, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 259, 252, 244, 238, 235, 232, 229, 224, 224, 220, 217, 215, 213, 211, 209, 207, 206, 204, 202, 201, 199, 198, 197, 196, 195, 194, 193, 192, 191, 191, 190, 190, 189, 189, 189, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 189, 189, 190, 190, 191, 192, 193, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 217, 219, 221, 224, 227, 230, 232, 235, 238, 241, 244, 247, 250, 254, 258, 262, 268, 272, 277, 282, 287, 292, 298, 305, 311, 317, 324, 335, 343, 352, 360, 370, 380, 390, 402, 414, 414, 442, 465, 482, 500, 520, 542, 0, 530, 0, 597, 594, 592, 589, 586, 584, 583, 581, 580, 579, 576, 576, 576, 574, 574, 573, 573, 573, 574, 574, 575, 576, 576, 577, 580, 580, 583, 583, 587, 589, 591, 594, 597, 601, 603, 606, 0, 728, 0, 545, 520, 497, 477, 456, 456, 424, 410, 410, 379, 368, 368, 349, 340, 332, 324, 317, 311, 303, 298, 292, 284, 279, 274, 270, 265, 261, 257, 253, 250, 246, 243, 239, 237, 234, 232, 232, 227, 225, 223, 222, 220, 218, 216, 215, 213, 212, 211, 210, 209, 208, 207, 206, 205, 205, 204, 204, 204, 203, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 203]', 
                '[0, 209, 210, 210, 211, 211, 212, 213, 214, 214, 215, 216, 217, 219, 220, 222, 223, 224, 226, 228, 229, 231, 233, 235, 238, 240, 243, 245, 249, 254, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 248, 241, 241, 228, 225, 223, 220, 218, 215, 213, 213, 209, 207, 205, 203, 202, 200, 199, 198, 196, 195, 194, 193, 192, 191, 190, 190, 189, 188, 188, 188, 187, 187, 187, 186, 186, 186, 186, 186, 186, 186, 187, 187, 187, 188, 188, 188, 189, 190, 191, 191, 192, 193, 194, 195, 196, 196, 198, 199, 201, 202, 203, 205, 206, 208, 210, 211, 213, 215, 219, 221, 222, 225, 228, 231, 233, 236, 239, 239, 245, 250, 254, 0, 0, 0, 0, 0, 0, 253, 249, 245, 241, 237, 234, 230, 230, 225, 225, 220, 218, 216, 214, 212, 210, 208, 206, 205, 204, 202, 201, 200, 199, 198, 197, 196, 195, 194, 194, 193, 193, 192, 192, 191, 191, 191, 191, 190, 190, 190, 191, 191, 191, 191, 191, 192, 192, 193, 194, 194, 195, 196, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 213, 214, 216, 218, 220, 223, 226, 228, 229, 233, 235, 238, 238, 238, 247, 250, 256, 259, 263, 267, 271, 0, 0, 266, 306, 0, 0, 269, 266, 262, 258, 255, 252, 249, 246, 244, 241, 238, 236, 233, 231, 229, 227, 225, 224, 222, 221, 220, 218, 217, 215, 214, 214, 213, 212, 211, 211, 210, 210, 209, 209, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209]']
        self.POINT_2 = ['[0, 201, 202, 202, 203, 203, 204, 204, 205, 206, 207, 208, 209, 209, 210, 212, 213, 214, 216, 217, 219, 220, 222, 223, 226, 228, 230, 232, 236, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 296, 289, 278, 272, 265, 261, 258, 254, 251, 249, 249, 244, 242, 242, 237, 236, 234, 232, 230, 228, 227, 226, 224, 223, 222, 220, 220, 219, 218, 217, 216, 216, 215, 215, 215, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 215, 215, 216, 216, 217, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 233, 234, 236, 237, 239, 241, 244, 247, 249, 249, 253, 257, 260, 262, 265, 268, 272, 275, 278, 282, 286, 289, 293, 300, 304, 309, 314, 319, 325, 333, 339, 346, 349, 359, 371, 379, 387, 387, 405, 415, 425, 436, 448, 460, 473, 494, 510, 526, 545, 564, 584, 616, 616, 669, 698, 730, 783, 824, 868, 919, 0, 1366, 1364, 1358, 1353, 1351, 1352, 1351, 1351, 1350, 1349, 1350, 1351, 1351, 1352, 1353, 1358, 1358, 1364, 1367, 1372, 1290, 1263, 1263, 1050, 971, 891, 827, 771, 719, 655, 619, 586, 558, 534, 512, 480, 462, 446, 431, 416, 398, 386, 375, 365, 365, 346, 338, 330, 330, 315, 309, 302, 294, 288, 283, 278, 273, 269, 263, 259, 255, 252, 249, 244, 242, 239, 236, 234, 231, 229, 227, 227, 227, 221, 219, 217, 216, 214, 213, 212, 210, 209, 208, 207, 206, 206, 204, 204, 203, 203, 202, 202, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201]', 
                '[90, 226, 227, 227, 228, 229, 229, 229, 231, 232, 233, 234, 235, 237, 238, 240, 241, 242, 244, 246, 248, 250, 251, 253, 257, 259, 260, 264, 269, 274, 279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 380, 384, 389, 394, 398, 408, 416, 427, 437, 448, 461, 473, 486, 501, 516, 533, 561, 581, 602, 626, 655, 681, 681, 681, 787, 827, 874, 954, 1008, 1009, 1013, 1000, 996, 994, 991, 989, 984, 983, 982, 979, 979, 978, 978, 978, 978, 978, 979, 981, 982, 982, 983, 920, 892, 799, 726, 668, 619, 576, 541, 511, 486, 452, 432, 415, 399, 384, 370, 356, 345, 334, 325, 315, 303, 295, 295, 281, 275, 269, 263, 258, 253, 248, 244, 239, 233, 232, 228, 225, 222, 219, 216, 213, 211, 208, 206, 203, 201, 199, 197, 196, 194, 193, 193, 190, 189, 187, 186, 185, 184, 183, 182, 181, 181, 180, 179, 179, 178, 178, 177, 177, 177, 177, 177, 177, 176, 177, 177, 177, 177, 177, 178, 178, 178, 179, 179, 180, 181, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 201, 202, 204, 206, 208, 210, 213, 215, 217, 221, 223, 226, 229, 232, 235, 238, 242, 245, 249, 252, 257, 263, 267, 272, 277, 0, 269, 0, 0, 279, 275, 272, 267, 265, 262, 262, 256, 254, 252, 250, 248, 246, 244, 242, 240, 238, 237, 236, 235, 233, 232, 231, 230, 229, 228, 228, 227, 227, 226, 226, 225, 225, 225, 225, 225, 225, 225, 225, 225, 226, 226]', 
                '[0, 209, 210, 210, 211, 211, 212, 213, 214, 214, 215, 216, 217, 219, 220, 222, 223, 224, 226, 228, 229, 231, 233, 235, 238, 240, 243, 245, 249, 254, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 248, 241, 241, 228, 225, 223, 220, 218, 215, 213, 213, 209, 207, 205, 203, 202, 200, 199, 198, 196, 195, 194, 193, 192, 191, 190, 190, 189, 188, 188, 188, 187, 187, 187, 186, 186, 186, 186, 186, 186, 186, 187, 187, 187, 188, 188, 188, 189, 190, 191, 191, 192, 193, 194, 195, 196, 196, 198, 199, 201, 202, 203, 205, 206, 208, 210, 211, 213, 215, 219, 221, 222, 225, 228, 231, 233, 236, 239, 239, 245, 250, 254, 0, 0, 0, 0, 0, 0, 253, 249, 245, 241, 237, 234, 230, 230, 225, 225, 220, 218, 216, 214, 212, 210, 208, 206, 205, 204, 202, 201, 200, 199, 198, 197, 196, 195, 194, 194, 193, 193, 192, 192, 191, 191, 191, 191, 190, 190, 190, 191, 191, 191, 191, 191, 192, 192, 193, 194, 194, 195, 196, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 213, 214, 216, 218, 220, 223, 226, 228, 229, 233, 235, 238, 238, 238, 247, 250, 256, 259, 263, 267, 271, 0, 0, 266, 306, 0, 0, 269, 266, 262, 258, 255, 252, 249, 246, 244, 241, 238, 236, 233, 231, 229, 227, 225, 224, 222, 221, 220, 218, 217, 215, 214, 214, 213, 212, 211, 211, 210, 210, 209, 209, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209]']

        self.client = Client()

   def run(self):
        for i in range(len(self.POINT_2)):
            self.client.pub({ "AngularDistance": self.POINT_2[i] }, verbose=True)
            sleep(.5)

def test():
    plt.ion()
    client = Client()
    mapper = Mapper()
    odo = Odometry()
    client.loop_start()
    angular_dis = None
    x_glob = np.array([])
    y_glob = np.array([])
    sender = SendMockdata('TestMock')
    sender.start()
    while sender.is_alive():
        try:
            ret = client.sub(['AngularDistance'])
            if ret['AngularDistance'] != None:
                angular_dis = list(np.array(ret['AngularDistance'].replace('[','').replace(']','').split(',')[1:]).astype('int'))
                turn_flag = int(ret['AngularDistance'].replace('[','').replace(']','').split(',')[0]) # flag for swap x -> y, y -> x
                points = odo.transform2cartesian(angular_dis)
                xs = np.array([])
                ys = np.array([])
                for point in points:
                    xs = np.append(xs, point.x) # max width = 320px
                    ys = np.append(ys, point.y) # max height = 240px
                mapper.map(xs, ys, turn_flag)
        except KeyboardInterrupt:
            break
    x_glob, y_glob = mapper.construct()
    fig = plt.figure()
    ax = fig.add_subplot(111)
    for i in range(x_glob.shape[0]):
        ax.scatter(x_glob[i], y_glob[i], s=10, c=np.random.rand(3,), label=i)

    plt.legend(loc='upper left')
    plt.savefig('plot1.png')

def test2():
    plt.ion()
    block_length = 400
    client = Client()
    mapper = Mapper(maze_size=12, padd=True)
    odo = Odometry()
    client.loop_start()
    sender = SendMockdata('TestMock')
    sender.start()
    while sender.is_alive():
        try:
            ret = client.sub(['AngularDistance'])
            if ret['AngularDistance'] != None:
                forward_distance, rotate_angle = odo.maximum_forward_distance(ret['AngularDistance'])
                mapper.map(forward_distance, rotate_angle, block_length)
        except KeyboardInterrupt:
            break
    maze = mapper.construct()
    plt.imshow(maze, interpolation='none')
    plt.show()
    plt.waitforbuttonpress()

def test3():
    client = Client()
    client.loop_start()
    try:
        while True:
            ret = client.sub(['AngularDistance', 'StopExplore'])
            if ret['AngularDistance'] != None or ret['StopExplore'] != None:
                console.log(log_locals=True)
    except:
        console.log('Stop')

if __name__ == '__main__':
    test3()
